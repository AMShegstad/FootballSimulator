/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.14.2/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
    id("com.gradle.build-scan") version "3.16.2"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation(libs.guava)

    // Jackson for JSON processing
    implementation("com.fasterxml.jackson.core:jackson-databind:2.17.0")
    implementation("com.fasterxml.jackson.core:jackson-core:2.17.0")
    implementation("com.fasterxml.jackson.core:jackson-annotations:2.17.0")

    // JUnit 5 (Jupiter) - FIXED: Remove JUnit 4 conflict
    testImplementation("org.junit.jupiter:junit-jupiter:5.10.2")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    
    // Mockito for mocking
    testImplementation("org.mockito:mockito-core:5.1.1")
    testImplementation("org.mockito:mockito-junit-jupiter:5.1.1")
    
    // AssertJ for better assertions
    testImplementation("org.assertj:assertj-core:3.24.2")
}

// REMOVED: This conflicts with JUnit 5
// testing {
//     suites {
//         val test by getting(JvmTestSuite::class) {
//             useJUnit("4.13.2")  // This was causing conflicts!
//         }
//     }
// }

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(23)
    }
}

application {
    // Define the main class for the application.
    mainClass = "com.alexshegstad.footballsimulator.App"
}

buildScan {
    termsOfServiceUrl = "https://gradle.com/terms-of-service"
    termsOfServiceAgree = "yes"
    publishAlways()
}

tasks.test {
    useJUnitPlatform()
    
    testLogging {
        events("started", "passed", "skipped", "failed")
        showExceptions = true
        showStackTraces = true
        exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL
        
        // Live output
        afterSuite { desc, result ->
            if (!desc.parent) {
                println("\nTest results: ${result.resultType}")
                println("Test summary: ${result.testCount} tests, " +
                       "${result.successfulTestCount} succeeded, " +
                       "${result.failedTestCount} failed, " +
                       "${result.skippedTestCount} skipped")
            }
        }
    }
}

// E2E Test Configuration
configurations {
    create("e2eTestImplementation") {
        extendsFrom(configurations.testImplementation.get())
    }
    create("e2eTestRuntimeOnly") {
        extendsFrom(configurations.testRuntimeOnly.get())
    }
}

sourceSets {
    create("e2eTest") {
        compileClasspath += sourceSets.main.get().output
        runtimeClasspath += sourceSets.main.get().output
        compileClasspath += configurations.e2eTestImplementation.get()
        runtimeClasspath += configurations.e2eTestRuntimeOnly.get()
    }
}

tasks.register<Test>("e2eTest") {
    description = "Run end-to-end tests"
    group = "verification"
    
    testClassesDirs = sourceSets["e2eTest"].output.classesDirs
    classpath = sourceSets["e2eTest"].runtimeClasspath
    
    useJUnitPlatform()
    
    // E2E tests should run slower
    systemProperty("junit.jupiter.execution.timeout.default", "5m")
    
    testLogging {
        events("started", "passed", "skipped", "failed")
        showExceptions = true
        showStackTraces = true
    }
}

// Custom task to run different test types
tasks.register("testAll") {
    description = "Run all test types"
    group = "verification"
    dependsOn("test", "e2eTest")
}

tasks.register("testUnit") {
    description = "Run only unit tests"
    group = "verification"
    dependsOn("test")
}
